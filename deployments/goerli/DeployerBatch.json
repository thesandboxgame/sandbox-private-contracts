{
  "address": "0xE59D8a99fD490401C5f8f0f8F84F35987ad6Cbf2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Batch.Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "atomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.ExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "atomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Batch.Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "nonAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.ExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "nonAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "callDatas",
          "type": "bytes[]"
        }
      ],
      "name": "singleTargetAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.SingleTargetExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "singleTargetAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "callDatas",
          "type": "bytes[]"
        }
      ],
      "name": "singleTargetNonAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.SingleTargetExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "singleTargetNonAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4bc5a36656d315c07e24484b6de9c706ee4149d5abcc5ec426ab4607f434fc0",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xE59D8a99fD490401C5f8f0f8F84F35987ad6Cbf2",
    "transactionIndex": 1,
    "gasUsed": "1129461",
    "logsBloom": "0x
    "blockHash": "0x4ce68e73e53f642cd4fce0415ba55f562310395dc603c8cee313f4d3885cd34e",
    "transactionHash": "0xa4bc5a36656d315c07e24484b6de9c706ee4149d5abcc5ec426ab4607f434fc0",
    "logs": [],
    "blockNumber": 5030841,
    "cumulativeGasUsed": "1150973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e"
  ],
  "solcInputHash": "03fb797234b3993780ca5854e51c66e9",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Batch.Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"atomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.ExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"atomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Batch.Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"nonAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.ExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"nonAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"}],\"name\":\"singleTargetAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.SingleTargetExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"singleTargetAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"}],\"name\":\"singleTargetNonAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.SingleTargetExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"singleTargetNonAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.7/Utils/Batch.sol\":\"Batch\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"src/solc_0.7/Utils/Batch.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract Batch {\\n    using Address for address;\\n\\n    struct Execution {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct ExecutionWithETH {\\n        address target;\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    struct SingleTargetExecutionWithETH {\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    address public immutable executor;\\n\\n    constructor(address _executor) {\\n        executor = _executor;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor, \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function atomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            executions[i].target.functionCallWithValue(executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function nonAtomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(executions[i].target, executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function atomicBatch(Execution[] memory executions) external onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            executions[i].target.functionCall(executions[i].callData);\\n        }\\n    }\\n\\n    function nonAtomicBatch(Execution[] memory executions) external onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(executions[i].target, executions[i].callData, 0);\\n        }\\n    }\\n\\n    function singleTargetAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\\n        external\\n        payable\\n        onlyExecutor\\n    {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            target.functionCallWithValue(executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function singleTargetNonAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\\n        external\\n        payable\\n        onlyExecutor\\n    {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(target, executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function singleTargetAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\\n        for (uint256 i = 0; i < callDatas.length; i++) {\\n            target.functionCall(callDatas[i]);\\n        }\\n    }\\n\\n    function singleTargetNonAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\\n        for (uint256 i = 0; i < callDatas.length; i++) {\\n            _call(target, callDatas[i], 0);\\n        }\\n    }\\n\\n    function _call(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bool) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = target.call{value: value}(data);\\n        return success;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------------\\n    // TOKEN RECEPTION\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    // ERC1155\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n\\n    // ERC721\\n\\n    bytes4 private constant ERC721_IS_RECEIVER = 0x150b7a02;\\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n    // ERC165\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return _interfaceId == 0x01ffc9a7 || _interfaceId == ERC1155_IS_RECEIVER || _interfaceId == ERC721_IS_RECEIVER;\\n    }\\n}\\n\",\"keccak256\":\"0x34c71ee688931d78227d6f929e3aff6f337c1799b4081777e1bc93a8a763d790\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161144138038061144183398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c61138a6100b760003980610274528061040f52806104b9528061054f528061060f52806106dc528061070952806107c0528061086d525061138a6000f3fe6080604052600436106100d15760003560e01c806393538f111161007f578063d2570b3b11610059578063d2570b3b146101f6578063f23a6e6114610216578063f28503e914610236578063fad5f5ed14610249576100d1565b806393538f11146101a1578063bc197c81146101b4578063c34c08e5146101d4576100d1565b8063150b7a02116100b0578063150b7a021461014e578063570187a01461017b5780638fc179571461018e576100d1565b8062ebd9e5146100d657806301ffc9a7146100f85780630dc09f2f1461012e575b600080fd5b3480156100e257600080fd5b506100f66100f13660046110f8565b610269565b005b34801561010457600080fd5b506101186101133660046111c7565b61031d565b6040516101259190611254565b60405180910390f35b34801561013a57600080fd5b506100f6610149366004610e85565b610404565b34801561015a57600080fd5b5061016e610169366004610da9565b610485565b604051610125919061125f565b6100f6610189366004610f24565b6104ae565b6100f661019c36600461100f565b610544565b6100f66101af366004610f24565b610604565b3480156101c057600080fd5b5061016e6101cf366004610cf2565b6106ad565b3480156101e057600080fd5b506101e96106da565b6040516101259190611240565b34801561020257600080fd5b506100f6610211366004610e85565b6106fe565b34801561022257600080fd5b5061016e610231366004610e0f565b61078a565b6100f661024436600461100f565b6107b5565b34801561025557600080fd5b506100f66102643660046110f8565b610862565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102ba5760405162461bcd60e51b81526004016102b19061128c565b60405180910390fd5b60005b8151811015610319576103108282815181106102d557fe5b6020026020010151602001518383815181106102ed57fe5b6020026020010151600001516001600160a01b03166108f990919063ffffffff16565b506001016102bd565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103b057507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b806103fc57507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b90505b919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461044c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610480576104778383838151811061046857fe5b60200260200101516000610942565b5060010161044f565b505050565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104f65760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156104805761053b8383838151811061051257fe5b60200260200101516000015184848151811061052a57fe5b602002602001015160200151610942565b506001016104f9565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461058c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610319576105fb8282815181106105a757fe5b6020026020010151602001518383815181106105bf57fe5b6020026020010151604001518484815181106105d757fe5b6020026020010151600001516001600160a01b03166109ac9092919063ffffffff16565b5060010161058f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461064c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610480576106a482828151811061066757fe5b60200260200101516000015183838151811061067f57fe5b602002602001015160200151856001600160a01b03166109ac9092919063ffffffff16565b5060010161064f565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107465760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156104805761078182828151811061076157fe5b6020026020010151846001600160a01b03166108f990919063ffffffff16565b50600101610749565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fd5760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156103195761085982828151811061081857fe5b60200260200101516000015183838151811061083057fe5b60200260200101516020015184848151811061084857fe5b602002602001015160400151610942565b50600101610800565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108aa5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610319576108f08282815181106108c557fe5b6020026020010151600001518383815181106108dd57fe5b6020026020010151602001516000610942565b506001016108ad565b606061093b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506109da565b9392505050565b600080846001600160a01b0316838560405161095e9190611207565b60006040518083038185875af1925050503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b50909695505050505050565b60606109d284848460405180606001604052806029815260200161132c602991396109e5565b949350505050565b60606109d284846000855b606082471015610a265760405162461bcd60e51b81526004018080602001828103825260268152602001806113066026913960400191505060405180910390fd5b610a2f85610b41565b610a80576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610abf5780518252601f199092019160209182019101610aa0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b21576040519150601f19603f3d011682016040523d82523d6000602084013e610b26565b606091505b5091509150610b36828286610b47565b979650505050505050565b3b151590565b60608315610b5657508161093b565b825115610b665782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bb0578181015183820152602001610b98565b50505050905090810190601f168015610bdd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80356001600160a01b03811681146103ff57600080fd5b60008083601f840112610c13578182fd5b50813567ffffffffffffffff811115610c2a578182fd5b6020830191508360208083028501011115610c4457600080fd5b9250929050565b60008083601f840112610c5c578182fd5b50813567ffffffffffffffff811115610c73578182fd5b602083019150836020828501011115610c4457600080fd5b600082601f830112610c9b578081fd5b813567ffffffffffffffff811115610caf57fe5b610cc26020601f19601f840116016112c3565b9150808252836020828501011115610cd957600080fd5b8060208401602084013760009082016020015292915050565b60008060008060008060008060a0898b031215610d0d578384fd5b610d1689610beb565b9750610d2460208a01610beb565b9650604089013567ffffffffffffffff80821115610d40578586fd5b610d4c8c838d01610c02565b909850965060608b0135915080821115610d64578586fd5b610d708c838d01610c02565b909650945060808b0135915080821115610d88578384fd5b50610d958b828c01610c4b565b999c989b5096995094979396929594505050565b60008060008060808587031215610dbe578384fd5b610dc785610beb565b9350610dd560208601610beb565b925060408501359150606085013567ffffffffffffffff811115610df7578182fd5b610e0387828801610c8b565b91505092959194509250565b60008060008060008060a08789031215610e27578182fd5b610e3087610beb565b9550610e3e60208801610beb565b94506040870135935060608701359250608087013567ffffffffffffffff811115610e67578283fd5b610e7389828a01610c4b565b979a9699509497509295939492505050565b60008060408385031215610e97578182fd5b610ea083610beb565b915060208084013567ffffffffffffffff811115610ebc578283fd5b8401601f81018613610ecc578283fd5b8035610edf610eda826112e7565b6112c3565b81815283810190838501865b84811015610f1457610f028b888435890101610c8b565b84529286019290860190600101610eeb565b5096999098509650505050505050565b60008060408385031215610f36578182fd5b610f3f83610beb565b915060208084013567ffffffffffffffff80821115610f5c578384fd5b818601915086601f830112610f6f578384fd5b8135610f7d610eda826112e7565b81815284810190848601875b84811015610ffe57813587016040601f19828f03011215610fa857898afd5b604051604081018181108982111715610fbd57fe5b604052818a013588811115610fd0578b8cfd5b610fde8f8c83860101610c8b565b825250604091909101358982015284529287019290870190600101610f89565b50979a909950975050505050505050565b60006020808385031215611021578182fd5b823567ffffffffffffffff80821115611038578384fd5b818501915085601f83011261104b578384fd5b8135611059610eda826112e7565b81815284810190848601875b848110156110e957813587016060601f19828e0301121561108457898afd5b60408051606081018181108a8211171561109a57fe5b82526110a7838c01610beb565b815281830135898111156110b9578c8dfd5b6110c78f8d83870101610c8b565b828d015250606092909201359082015284529287019290870190600101611065565b50909998505050505050505050565b6000602080838503121561110a578182fd5b823567ffffffffffffffff80821115611121578384fd5b818501915085601f830112611134578384fd5b8135611142610eda826112e7565b81815284810190848601875b848110156110e95781358701604080601f19838f0301121561116e578a8bfd5b80518181018181108a8211171561118157fe5b825261118e838c01610beb565b81529082013590888211156111a1578b8cfd5b6111af8e8c84860101610c8b565b818c015286525050928701929087019060010161114e565b6000602082840312156111d8578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461093b578182fd5b60008251815b81811015611227576020818601810151858301520161120d565b818111156112355782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6020808252600e908201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156112df57fe5b604052919050565b600067ffffffffffffffff8211156112fb57fe5b506020908102019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220e77639af7318ff046e4cbd9f4200588fd0c6dbab4b8d6a87e822ab625e96ccba64736f6c63430007050033",
  "deployedBytecode": "0x6080604052600436106100d15760003560e01c806393538f111161007f578063d2570b3b11610059578063d2570b3b146101f6578063f23a6e6114610216578063f28503e914610236578063fad5f5ed14610249576100d1565b806393538f11146101a1578063bc197c81146101b4578063c34c08e5146101d4576100d1565b8063150b7a02116100b0578063150b7a021461014e578063570187a01461017b5780638fc179571461018e576100d1565b8062ebd9e5146100d657806301ffc9a7146100f85780630dc09f2f1461012e575b600080fd5b3480156100e257600080fd5b506100f66100f13660046110f8565b610269565b005b34801561010457600080fd5b506101186101133660046111c7565b61031d565b6040516101259190611254565b60405180910390f35b34801561013a57600080fd5b506100f6610149366004610e85565b610404565b34801561015a57600080fd5b5061016e610169366004610da9565b610485565b604051610125919061125f565b6100f6610189366004610f24565b6104ae565b6100f661019c36600461100f565b610544565b6100f66101af366004610f24565b610604565b3480156101c057600080fd5b5061016e6101cf366004610cf2565b6106ad565b3480156101e057600080fd5b506101e96106da565b6040516101259190611240565b34801561020257600080fd5b506100f6610211366004610e85565b6106fe565b34801561022257600080fd5b5061016e610231366004610e0f565b61078a565b6100f661024436600461100f565b6107b5565b34801561025557600080fd5b506100f66102643660046110f8565b610862565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102ba5760405162461bcd60e51b81526004016102b19061128c565b60405180910390fd5b60005b8151811015610319576103108282815181106102d557fe5b6020026020010151602001518383815181106102ed57fe5b6020026020010151600001516001600160a01b03166108f990919063ffffffff16565b506001016102bd565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103b057507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b806103fc57507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b90505b919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461044c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610480576104778383838151811061046857fe5b60200260200101516000610942565b5060010161044f565b505050565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104f65760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156104805761053b8383838151811061051257fe5b60200260200101516000015184848151811061052a57fe5b602002602001015160200151610942565b506001016104f9565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461058c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610319576105fb8282815181106105a757fe5b6020026020010151602001518383815181106105bf57fe5b6020026020010151604001518484815181106105d757fe5b6020026020010151600001516001600160a01b03166109ac9092919063ffffffff16565b5060010161058f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461064c5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610480576106a482828151811061066757fe5b60200260200101516000015183838151811061067f57fe5b602002602001015160200151856001600160a01b03166109ac9092919063ffffffff16565b5060010161064f565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107465760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156104805761078182828151811061076157fe5b6020026020010151846001600160a01b03166108f990919063ffffffff16565b50600101610749565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fd5760405162461bcd60e51b81526004016102b19061128c565b60005b81518110156103195761085982828151811061081857fe5b60200260200101516000015183838151811061083057fe5b60200260200101516020015184848151811061084857fe5b602002602001015160400151610942565b50600101610800565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108aa5760405162461bcd60e51b81526004016102b19061128c565b60005b8151811015610319576108f08282815181106108c557fe5b6020026020010151600001518383815181106108dd57fe5b6020026020010151602001516000610942565b506001016108ad565b606061093b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506109da565b9392505050565b600080846001600160a01b0316838560405161095e9190611207565b60006040518083038185875af1925050503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b50909695505050505050565b60606109d284848460405180606001604052806029815260200161132c602991396109e5565b949350505050565b60606109d284846000855b606082471015610a265760405162461bcd60e51b81526004018080602001828103825260268152602001806113066026913960400191505060405180910390fd5b610a2f85610b41565b610a80576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610abf5780518252601f199092019160209182019101610aa0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b21576040519150601f19603f3d011682016040523d82523d6000602084013e610b26565b606091505b5091509150610b36828286610b47565b979650505050505050565b3b151590565b60608315610b5657508161093b565b825115610b665782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bb0578181015183820152602001610b98565b50505050905090810190601f168015610bdd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80356001600160a01b03811681146103ff57600080fd5b60008083601f840112610c13578182fd5b50813567ffffffffffffffff811115610c2a578182fd5b6020830191508360208083028501011115610c4457600080fd5b9250929050565b60008083601f840112610c5c578182fd5b50813567ffffffffffffffff811115610c73578182fd5b602083019150836020828501011115610c4457600080fd5b600082601f830112610c9b578081fd5b813567ffffffffffffffff811115610caf57fe5b610cc26020601f19601f840116016112c3565b9150808252836020828501011115610cd957600080fd5b8060208401602084013760009082016020015292915050565b60008060008060008060008060a0898b031215610d0d578384fd5b610d1689610beb565b9750610d2460208a01610beb565b9650604089013567ffffffffffffffff80821115610d40578586fd5b610d4c8c838d01610c02565b909850965060608b0135915080821115610d64578586fd5b610d708c838d01610c02565b909650945060808b0135915080821115610d88578384fd5b50610d958b828c01610c4b565b999c989b5096995094979396929594505050565b60008060008060808587031215610dbe578384fd5b610dc785610beb565b9350610dd560208601610beb565b925060408501359150606085013567ffffffffffffffff811115610df7578182fd5b610e0387828801610c8b565b91505092959194509250565b60008060008060008060a08789031215610e27578182fd5b610e3087610beb565b9550610e3e60208801610beb565b94506040870135935060608701359250608087013567ffffffffffffffff811115610e67578283fd5b610e7389828a01610c4b565b979a9699509497509295939492505050565b60008060408385031215610e97578182fd5b610ea083610beb565b915060208084013567ffffffffffffffff811115610ebc578283fd5b8401601f81018613610ecc578283fd5b8035610edf610eda826112e7565b6112c3565b81815283810190838501865b84811015610f1457610f028b888435890101610c8b565b84529286019290860190600101610eeb565b5096999098509650505050505050565b60008060408385031215610f36578182fd5b610f3f83610beb565b915060208084013567ffffffffffffffff80821115610f5c578384fd5b818601915086601f830112610f6f578384fd5b8135610f7d610eda826112e7565b81815284810190848601875b84811015610ffe57813587016040601f19828f03011215610fa857898afd5b604051604081018181108982111715610fbd57fe5b604052818a013588811115610fd0578b8cfd5b610fde8f8c83860101610c8b565b825250604091909101358982015284529287019290870190600101610f89565b50979a909950975050505050505050565b60006020808385031215611021578182fd5b823567ffffffffffffffff80821115611038578384fd5b818501915085601f83011261104b578384fd5b8135611059610eda826112e7565b81815284810190848601875b848110156110e957813587016060601f19828e0301121561108457898afd5b60408051606081018181108a8211171561109a57fe5b82526110a7838c01610beb565b815281830135898111156110b9578c8dfd5b6110c78f8d83870101610c8b565b828d015250606092909201359082015284529287019290870190600101611065565b50909998505050505050505050565b6000602080838503121561110a578182fd5b823567ffffffffffffffff80821115611121578384fd5b818501915085601f830112611134578384fd5b8135611142610eda826112e7565b81815284810190848601875b848110156110e95781358701604080601f19838f0301121561116e578a8bfd5b80518181018181108a8211171561118157fe5b825261118e838c01610beb565b81529082013590888211156111a1578b8cfd5b6111af8e8c84860101610c8b565b818c015286525050928701929087019060010161114e565b6000602082840312156111d8578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461093b578182fd5b60008251815b81811015611227576020818601810151858301520161120d565b818111156112355782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6020808252600e908201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156112df57fe5b604052919050565b600067ffffffffffffffff8211156112fb57fe5b506020908102019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220e77639af7318ff046e4cbd9f4200588fd0c6dbab4b8d6a87e822ab625e96ccba64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}